// Code generated by MockGen. DO NOT EDIT.
// Source: ../control/model-interface.go

// Package mock is a generated GoMock package.
package mock

import (
	uip "github.com/HyperService-Consortium/go-uip/uip"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// SessionKV is a mock of SessionKV interface
type SessionKV struct {
	ctrl     *gomock.Controller
	recorder *SessionKVMockRecorder
}

// SessionKVMockRecorder is the mock recorder for SessionKV
type SessionKVMockRecorder struct {
	mock *SessionKV
}

// NewSessionKV creates a new mock instance
func NewSessionKV(ctrl *gomock.Controller) *SessionKV {
	mock := &SessionKV{ctrl: ctrl}
	mock.recorder = &SessionKVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SessionKV) EXPECT() *SessionKVMockRecorder {
	return m.recorder
}

// SetKV mocks base method
func (m *SessionKV) SetKV(iscAddress, provedKey, provedValue []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKV", iscAddress, provedKey, provedValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKV indicates an expected call of SetKV
func (mr *SessionKVMockRecorder) SetKV(iscAddress, provedKey, provedValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKV", reflect.TypeOf((*SessionKV)(nil).SetKV), iscAddress, provedKey, provedValue)
}

// GetKV mocks base method
func (m *SessionKV) GetKV(iscAddress, provedKey []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKV", iscAddress, provedKey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKV indicates an expected call of GetKV
func (mr *SessionKVMockRecorder) GetKV(iscAddress, provedKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKV", reflect.TypeOf((*SessionKV)(nil).GetKV), iscAddress, provedKey)
}

// StorageHandler is a mock of StorageHandler interface
type StorageHandler struct {
	ctrl     *gomock.Controller
	recorder *StorageHandlerMockRecorder
}

// StorageHandlerMockRecorder is the mock recorder for StorageHandler
type StorageHandlerMockRecorder struct {
	mock *StorageHandler
}

// NewStorageHandler creates a new mock instance
func NewStorageHandler(ctrl *gomock.Controller) *StorageHandler {
	mock := &StorageHandler{ctrl: ctrl}
	mock.recorder = &StorageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *StorageHandler) EXPECT() *StorageHandlerMockRecorder {
	return m.recorder
}

// GetTransactionProof mocks base method
func (m *StorageHandler) GetTransactionProof(chainID uip.ChainID, blockID uip.BlockID, color []byte) (uip.MerkleProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionProof", chainID, blockID, color)
	ret0, _ := ret[0].(uip.MerkleProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionProof indicates an expected call of GetTransactionProof
func (mr *StorageHandlerMockRecorder) GetTransactionProof(chainID, blockID, color interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionProof", reflect.TypeOf((*StorageHandler)(nil).GetTransactionProof), chainID, blockID, color)
}

// GetStorageAt mocks base method
func (m *StorageHandler) GetStorageAt(chainID uip.ChainID, typeID uip.TypeID, contractAddress uip.ContractAddress, pos, description []byte) (uip.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAt", chainID, typeID, contractAddress, pos, description)
	ret0, _ := ret[0].(uip.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAt indicates an expected call of GetStorageAt
func (mr *StorageHandlerMockRecorder) GetStorageAt(chainID, typeID, contractAddress, pos, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAt", reflect.TypeOf((*StorageHandler)(nil).GetStorageAt), chainID, typeID, contractAddress, pos, description)
}

// SetStorageOf mocks base method
func (m *StorageHandler) SetStorageOf(chainID uip.ChainID, typeID uip.TypeID, contractAddress uip.ContractAddress, pos, description []byte, variable uip.Variable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorageOf", chainID, typeID, contractAddress, pos, description, variable)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStorageOf indicates an expected call of SetStorageOf
func (mr *StorageHandlerMockRecorder) SetStorageOf(chainID, typeID, contractAddress, pos, description, variable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorageOf", reflect.TypeOf((*StorageHandler)(nil).SetStorageOf), chainID, typeID, contractAddress, pos, description, variable)
}
